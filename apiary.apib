FORMAT: 1A
HOST: http://localhost:5000/

# Nautto API

This API is a simple widget metadata service for users, layouts and sets. The API serves JSON data.

# Group Link Relations

This section described custom link relations defined in this API. These are not resources.

## users-all

Leads to root level user collection, which is a list all users known to the API.

## sets-all

Leads to root level set collection, which is a list all sets known to the API.

## layouts-all

Leads to root level layout collection, which is a list all layouts known to the API.

## widgets-all

Leads to root level widget collection, which is a list all widgets known to the API.

## widgets-by

Leads to a collection resource that includes all widgets by the associated user.

## layouts-by

Leads to a collection resource that includes all laytouts by the associated user.

## sets-by

Leads to a collection resource that includes all sets by the associated user.

## add-widget

This is a control that is used to add an widget to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## add-layout

This is a control that is used to add an layout to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## add-set

This is a control that is used to add an set to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## add-user

This is a control that is used to add an user to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## delete

Deletes the associated resource. Must be accessed with DELETE

# Group Profiles

This section includes resource profiles which provide semantic descriptions for the attributes of each resource, as well as the list of controls (by link relation) available from that resource.

## User Profile

Profile definition for all user related resources.

### Link Relations

This section lists all possible link relations associated with users; not all of them are necessarily present on each resource type. The following link relations from the nautto namespace are used:

 * [widgets-by](reference/link-relations/widgets-by)
 * [layouts-by](reference/link-relations/layouts-by)
 * [sets-by](reference/link-relations/sets-by)
 * [add-user](reference/link-relations/add-user)
 * [delete](reference/link-relations/delete)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * item
 * collection
 * edit
 * profile
 * self
 * up
 
### Semantic Descriptors

#### Data Type User

 * `name`: User name of the account. Mandatory. [STRING]
 * `description`: Users description. Optional. [STRING]

## Widget Profile

Profile definition for all widget related resources.

### Link Relations

This section lists all possible link relations associated with widgets; not all of them are necessarily present on each resource type. The following link relations from the nautto namespace are used:

 * [add-widget](reference/link-relations/add-widget)
 * [delete](reference/link-relations/delete)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * edit
 * profile
 * self
 * up

### Semantic Descriptors

#### Data Type Widget

 * `name`: Widgets name. Mandatory. [STRING]
 * `description`: Widgets description. Optional. [STRING]
 * `type`: Widgets type. Mandatory. [STRING]
 * `content`: Widgets content. Mandatory. [STRING]

## Layout Profile

Profile definition for all layout related resources.

### Link Relations

This section lists all possible link relations associated with layouts; not all of them are necessarily present on each resource type. The following link relations from the nautto namespace are used:

 * [add-layout](reference/link-relations/add-layout)
 * [delete](reference/link-relations/delete)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * edit
 * profile
 * self
 * up

### Semantic Descriptors

#### Data Type Layout

 * `name`: Layout name. Mandatory. [STRING]
 * `description`: Widgets description. Optional. [STRING]

## Set Profile

Profile definition for all set related resources.

### Link Relations

This section lists all possible link relations associated with sets; not all of them are necessarily present on each resource type. The following link relations from the nautto namespace are used:

 * [add-set](reference/link-relations/add-set)
 * [delete](reference/link-relations/delete)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * edit
 * profile
 * self

### Semantic Descriptors

#### Data Type Set

 * `name`: Set name. Mandatory. [STRING]
 * `description`: Widgets description. Optional. [STRING]


## Error Profile

Profile definition for all errors returned by the API. See [Mason error control](https://github.com/JornWildt/Mason/blob/master/Documentation/Mason-draft-2.md#property-name-error) for more information about errors.

+ Attributes

    + resource_url (string, required) - URI of the resource the error was generated from. 
 
# Group Entry

This group contains the entry point of the API

## Entry Point [/api/]

### Get entry point [GET]

Get the API entry point

+ Request

    + Headers
    
            Accept: application/vnd.mason+json
            
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "nautto": {
                        "name": "/nautto/link-relations#"
                    }
                },
                "@controls": {
                    "nautto:users-all": {
                        "href": "/api/users/"
                    },
                    "nautto:sets-all": {
                        "href": "/api/sets/"
                    },
                    "nautto:layouts-all": {
                        "href": "/api/layouts/"
                    },
                    "nautto:widgets-all": {
                        "href": "/api/widgets/"
                    }
                }
            }

 
# Group User

All of these resources use the [User Profile](reference/profiles/user-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## User Collection [/api/users/]

A list of all user known to the API. This collection can be sorted using the sortby query parameter. For each user, all column values except ID are shown in their collection entries, more information can be found by following the `self` relation of each user.

### List all users [GET]

Get a list of all users known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "@controls": {
                "self": {
                    "href": "/api/users/"
                },
                "nautto:add-user": {
                  "href": "/api/users/",
                  "title": "Add a new user",
                  "encoding": "json",
                  "method": "POST",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Users name",
                        "type": "string"
                      },
                      "description": {
                        "description": "User description",
                        "type": "string"
                      }
                    },
                    "required": ["name"]
                  }
                }
              },
              "items": [
                {
                  "id": 1,
                  "name": "Test User 1",
                  "@controls": {
                    "self": {
                        "href": "/api/users/1/"
                    },
                    "profile": {
                        "href": "/profiles/user/"
                    }
                  }
                }
              ]
            }

### Add user [POST]

Adds a new user to the collection. The user representation must be valid against the user schema.

+ Relation: add-user
+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test User 2",
                "description":"User for testing, number 2",
            }

+ Response 201

    + Headers
    
            Location: /api/users/2/
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    },
                }
            }
     
## User [/api/users/{user}/]

This resource represents an single user, as identified by the user's unique id.

+ Parameters

    + user: 1 (string) - user's unique id (id)


### User information [GET]

Get the user representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "name": "Test User 1",
              "description": "User for testing, number 1",
              "@controls": {
                "self": {
                    "href": "/api/users/1/"
                },
                "profile": {
                    "href": "/profiles/user/"
                },
                "collection": {
                    "href": "/api/users/"
                },
                "edit": {
                    "href": "/api/users/1/",
                    "title": "Edit this user",
                    "encoding": "json",
                    "method": "PUT",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Users name",
                                "type": "string"
                            },
                            "description": {
                                "description": "Users description",
                                "type": "string"
                            },
                        },
                        "required": ["name"]
                    }
                },
                "nautto:delete": {
                    "href": "/api/users/1/",
                    "title": "Delete this user",
                    "method": "DELETE"
                },
                "nautto:widgets-by": {
                    "href": "/api/users/1/widgets/"
                },
                "nautto:layouts-by": {
                    "href": "/api/users/1/layouts/"
                },
                "nautto:sets-by": {
                    "href": "/api/users/1/sets/"
                },
              }
            }


+ Response 404 (application/vnd.mason+json)

    The client is trying to access an user that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/users/doesnt-exist/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Edit user information [PUT]

Replace the user's representation with a new one. Missing optinal fields will be set to null. Must validate against the user schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test User 1",
                "description":"User for testing, number 1",
            }
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an user that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/users/doesnt-exist/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete user [DELETE]

Deletes the user.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an user that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/users/doesnt-exist/",
                "@error": {
                    "@message": "widget not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

# Group Widget

## Widget Collection [/api/widgets/]

A list of all widgets known to the API.

### List all widgets [GET]

Get a list of all widgets known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "@controls": {
                "self": {
                  "href": "/api/widgets/"
                },
                "nautto:add-widget": {
                  "href": "/api/widgets/",
                  "title": "Add a new widget",
                  "encoding": "json",
                  "method": "POST",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "widgets name",
                        "type": "string"
                      },
                      "description": {
                        "description": "widget description",
                        "type": "string"
                      }
                    },
                    "required": ["name", "type", "content"]
                  }
                }
              },
              "items": [
                {
                    "id": 1,
                    "name": "Test widget 1",
                    "@controls": {
                        "self": {
                            "href": "/api/widgets/1/"
                        },
                        "profile": {
                            "href": "/profiles/widget/"
                        }
                    }
                }
              ]
            }

### Add widget [POST]

Adds a new widget to the collection. The widget representation must be valid against the widget schema.

+ Relation: add-widget
+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test widget 2",
                "description":"widget for testing, number 2",
            }

+ Response 201

    + Headers
    
            Location: /api/widgets/2/
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/widgets/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Widgets by User [/api/users/{user}/widgets/]

This is an widget collection by given user using the user's unique id. 

+ Parameters

    + user: 1 (string) - user's unique id (id)

### List widgets by user [GET]

Get a list of widgets by the user.

+ Relation: widgets-by
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "nautto": {
                        "name": "/nautto/link-relations#"
                    }
                }, 
                "@controls": {
                    "self": {
                        "href": "/api/users/1/widgets/"
                    },                  
                    "author": {
                        "href": "/api/users/1/"
                    },
                },
                "items": [
                    {
                        "id": 1,
                        "name": "Test widget 1",
                        "@controls": {
                            "self": {
                                "href": "/api/widgets/1/"
                            },
                            "profile": {
                                "href": "/profiles/widget/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to retrieve list of widgets for an user that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/users/doesnt-exists/widgets/",
                "@error": {
                    "@message": "Unsupported not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

## Widget [/api/widgets/{widget}/]

This resource represents an single widget, as identified by the widget's unique id.

+ Parameters

    + widget: 1 (string) - widget's unique id (id)


### Widget information [GET]

Get the widget representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "name": "Test Widget 1",
              "description": "Widget for testing, number 1",
              "type": "HTML",
              "content": "<H1>Test widget 1, Hello World</H1>"
              "@controls": {
                "self": {
                    "href": "/api/widgets/1/"
                },
                "profile": {
                    "href": "/profiles/widget/"
                },
                "collection": {
                    "href": "/api/widgets/"
                },
                "edit": {
                  "href": "/api/widgets/1/",
                  "title": "Edit this widget",
                  "encoding": "json",
                  "method": "PUT",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Widgets name",
                        "type": "string"
                      },
                      "description": {
                        "description": "Widgets description",
                        "type": "string"
                      },
                      "type": {
                        "description": "Widgets type",
                        "type": "string"
                      },
                      "content": {
                        "description": "Widgets content",
                        "type": "string"
                      },
                    },
                    "required": ["name", "type", "content"]
                  }
                },
                "nautto:delete": {
                  "href": "/api/widgets/1/",
                  "title": "Delete this widget",
                  "method": "DELETE"
                },
              }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an widget that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/widgets/doesnt-exist/",
                "@error": {
                    "@message": "Widget not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Edit widget information [PUT]

Replace the widget's representation with a new one. Missing optinal fields will be set to null. Must validate against the widget schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test Widget 1",
                "description":"Widget for testing, number 1",
                "type":"HTML",
                "content":"<h1>Test widget 1, Hello World</h1>"
            }
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an widget that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/widgets/doesnt-exist/",
                "@error": {
                    "@message": "Widget not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/widgets/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete widget [DELETE]

Deletes the widget

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an widget that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/widgets/doesnt-exist/",
                "@error": {
                    "@message": "Widget not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

# Group Layout

## Layout Collection [/api/layouts/]

A list of all layouts known to the API. This collection can be sorted using the sortby query parameter. For each layout, all column values except ID are shown in their collection entries, more information can be found by following the `self` relation of each layout.

### List all layouts [GET]

Get a list of all layouts known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "@controls": {
                "self": {
                  "href": "/api/layouts/"
                },
                "nautto:add-layout": {
                  "href": "/api/layouts/",
                  "title": "Add a new layout",
                  "encoding": "json",
                  "method": "POST",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "layouts name",
                        "type": "string"
                      },
                      "description": {
                        "description": "layout description",
                        "type": "string"
                      }
                    },
                    "required": ["name"]
                  }
                }
              },
              "items": [
                {
                    "id": 1,
                    "name": "Test layout 1",
                    "@controls": {
                        "self": {
                            "href": "/api/layouts/1/"
                        },
                        "profile": {
                            "href": "/profiles/layout/"
                        }
                    }
                }
              ]
            }

### Add layout [POST]

Adds a new layout to the collection. The layout representation must be valid against the layout schema.

+ Relation: add-layout
+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test layout 2",
                "description":"layout for testing, number 2",
            }

+ Response 201

    + Headers
    
            Location: /api/layouts/2/
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/layouts/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Layouts by User [/api/users/{user}/layouts/]

This is an layout collection by given user using the user's unique id. 

+ Parameters

    + user: 1 (string) - user's unique id (id)

### List layouts by user [GET]

Get a list of layouts by the user.

+ Relation: layouts-by
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "nautto": {
                        "name": "/nautto/link-relations#"
                    }
                }, 
                "@controls": {
                    "self": {
                        "href": "/api/users/1/layouts/"
                    },                  
                    "author": {
                        "href": "/api/users/1/"
                    },
                },
                "items": [
                    {
                        "id": 1,
                        "name": "Test layout 1",
                        "@controls": {
                            "self": {
                                "href": "/api/layouts/1/"
                            },
                            "profile": {
                                "href": "/profiles/layout/"
                            },
                            "nautto:widgets-of": {
                                "href": "/api/layouts/1/widgets/",
                                "title": "widgets of a layout",
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to retrieve list of layouts for an user that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/users/doesnt-exists/layouts/",
                "@error": {
                    "@message": "Unsupported not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }


## Layout [/api/layouts/{layout}/]

This resource represents an single layout, as identified by the layout's unique id.

+ Parameters

    + layout: 1 (string) - layout's unique id (id)


### Layout information [GET]

Get the layout representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "name": "Test Layout 1",
              "description": "Layout for testing, number 1",
              "items":[
                    {
                        "id": 1,
                        "name": "Test widget 1",
                        "@controls": {
                            "self": {
                                "href": "/api/widgets/1/"
                            },
                            "profile": {
                                "href": "/profiles/widget/"
                            }
                        }
                    }
                ]
              "@controls": {
                "self": {
                    "href": "/api/layouts/1/"
                },
                "profile": {
                    "href": "/profiles/layout/"
                },
                "collection": {
                    "href": "/api/layouts/"
                },
                "edit": {
                  "href": "/api/layouts/1/",
                  "title": "Edit this layout",
                  "encoding": "json",
                  "method": "PUT",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Layouts name",
                        "type": "string"
                      },
                      "description": {
                        "description": "Layouts description",
                        "type": "string"
                      },
                    },
                    "required": ["name"]
                  }
                },
                "nautto:delete": {
                  "href": "/api/layouts/1/",
                  "title": "Delete this layout",
                  "method": "DELETE"
                },
                "nautto:widgets-of": {
                    "href": "/api/layouts/1/widgets/",
                    "title": "widgets of a layout",
                },
                "nautto:add-widget": {
                    "href": "/api/layouts/1/",
                    "title": "Add widget to layout",
                    "method": "PUT"
                }
              }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an layout that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/layouts/doesnt-exist/",
                "@error": {
                    "@message": "Layout not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Edit layout information [PUT]

Replace the layout's representation with a new one. Missing optinal fields will be set to null. Must validate against the layout schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test Layout 1",
                "description":"Layout for testing, number 1",
                "items": [
                    {
                        "id": 1
                    },
                    {
                        "id": 2
                    }
                ]
            }
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an layout that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/layouts/doesnt-exist/",
                "@error": {
                    "@message": "Layout not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/layouts/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": ["Use JSON"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete layout [DELETE]

Deletes the layout

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an layout that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/layouts/doesnt-exist/",
                "@error": {
                    "@message": "Layout not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

# Group Set

## Set Collection [/api/sets/]

A list of all sets known to the API. This collection can be sorted using the sortby query parameter. For each set, all column values except ID are shown in their collection entries, more information can be found by following the `self` relation of each set.

### List all sets [GET]

Get a list of all sets known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "@controls": {
                "self": {
                  "href": "/api/sets/"
                },
                "nautto:add-set": {
                  "href": "/api/sets/",
                  "title": "Add a new set",
                  "encoding": "json",
                  "method": "POST",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "sets name",
                        "type": "string"
                      },
                      "description": {
                        "description": "set description",
                        "type": "string"
                      }
                    },
                    "required": ["name"]
                  }
                }
              },
              "items": [
                {
                    "id": 1,
                    "name": "Test set 1",
                    "@controls": {
                        "self": {
                            "href": "/api/sets/1/"
                        },
                        "profile": {
                            "href": "/profiles/set/"
                        }
                    }
                }
              ]
            }

### Add set [POST]

Adds a new set to the collection. The set representation must be valid against the set schema.

+ Relation: add-set
+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test set 2",
                "description":"set for testing, number 2",
            }

+ Response 201

    + Headers
    
            Location: /api/sets/2/
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/sets/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": ["Use JSON"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Sets by User [/api/users/{user}/sets/]

This is an set collection by given user using the user's unique id. 

+ Parameters

    + user: 1 (string) - user's unique id (id)

### List sets by user [GET]

Get a list of sets by the user.

+ Relation: sets-by
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
    
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "nautto": {
                        "name": "/nautto/link-relations#"
                    }
                }, 
                "@controls": {
                    "self": {
                        "href": "/api/users/1/sets/"
                    },                  
                    "author": {
                        "href": "/api/users/1/"
                    },
                },
                "items": [
                    {
                        "id": 1,
                        "name": "Test set 1",
                        "@controls": {
                            "self": {
                                "href": "/api/sets/1/"
                            },
                            "profile": {
                                "href": "/profiles/set/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to retrieve list of sets for an user that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/users/doesnt-exists/sets/",
                "@error": {
                    "@message": "Unsupported not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }


## Set [/api/sets/{set}/]

This resource represents an single set, as identified by the set's unique id.

+ Parameters

    + set: 1 (string) - set's unique id (id)


### Set information [GET]

Get the set representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
              "@namespaces": {
                "nautto": {
                  "name": "/nautto/link-relations#"
                }
              },
              "name": "Test Set 1",
              "description": "Set for testing, number 1",
                "items":[
                    {
                        "id": 1,
                        "name": "Test widget 1",
                        "@controls": {
                            "self": {
                                "href": "/api/widgets/1/"
                            },
                            "profile": {
                                "href": "/profiles/widget/"
                            }
                        }
                    }
                ]
              "@controls": {
                "self": {
                    "href": "/api/sets/1/"
                },
                "profile": {
                    "href": "/profiles/set/"
                },
                "collection": {
                    "href": "/api/sets/"
                },
                "edit": {
                  "href": "/api/sets/1/",
                  "title": "Edit this set",
                  "encoding": "json",
                  "method": "PUT",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Sets name",
                        "type": "string"
                      },
                      "description": {
                        "description": "Sets description",
                        "type": "string"
                      },
                    },
                    "required": ["name"]
                  }
                },
                "nautto:delete": {
                  "href": "/api/sets/1/",
                  "title": "Delete this set",
                  "method": "DELETE"
                }
              }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an set that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/sets/doesnt-exist/",
                "@error": {
                    "@message": "Set not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Edit set information [PUT]

Replace the set's representation with a new one. Missing optinal fields will be set to null. Must validate against the set schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name":"Test Set 1",
                "description":"Set for testing, number 1",
                "items": [
                    {
                        "id": 1
                    },
                    {
                        "id": 2
                    }
                ]
            }
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an set that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/sets/doesnt-exist/",
                "@error": {
                    "@message": "Set not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/sets/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete set [DELETE]

Deletes the set

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an set that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/sets/doesnt-exist/",
                "@error": {
                    "@message": "Set not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }